// TODO: Terrible code mess. Refactor this entire bit. Use regex to match markdown syntax

import { exists, walk, green } from "../dependencies.ts";

const folder = Deno.args[0];

if (!(await exists(folder))) {
  throw Error("Directory does not exist");
}

const decoder = new TextDecoder("utf-8");
let homePageView = `/** Autogenerated from markdown files using mdx-parser deno script */
import React from 'react';
import { Paper } from '@material-ui/core';
import { useSelector } from 'react-redux';
import { Link } from 'react-router-dom';
import { themeSelector } from '@state/theme.state';

const HomePageView = () => {
  const theme = useSelector(themeSelector);
  
  return (
    <div>`;

let articleFile = `import React, { FunctionComponent } from 'react';

const articles: { [fileName: string]: FunctionComponent } = {`;

for await (const fileOrFolder of walk(folder)) {
  if (fileOrFolder.isFile) {
    const { path } = fileOrFolder;
    const data = await Deno.readFile(path);
    const content = decoder.decode(data);

    const contentArr = content.split("\n");

    homePageView = `${homePageView}
        <Link to="/articles/${fileOrFolder.name.slice(
          0,
          -3
        )}"><Paper elevation={0} className="p-4 mt-8 cursor-pointer" style={{ backgroundColor: theme.elevated.bg, color: theme.elevated.text }}>
        <div className="flex row justify-between items-center">
        `;

    let mdxFlag = false;
    let ulFlag = false;
    let codeFlag = false;
    let heading = "";
    let articleContent = "";

    for (const item of contentArr) {
      // TODO: this needs to be optimized such that the order is most efficient when rendering
      // So most frequently passing if checks should be at the top
      if (mdxFlag) {
        if (item.slice(0, 5) === "Date:") {
          const date = item.slice(6);
          homePageView = `${homePageView}
          <p className="text-lg my-0">${date}</p>`;
        } else if (item.slice(0, 12) === "Description:") {
          const desc = item.slice(13);
          homePageView = `${homePageView}
          </div>
          <p>${desc}</p>`;
        } else if (item.slice(0, 3) === "```") {
          mdxFlag = false;
        }
      } else if (codeFlag) {
        if (item.slice(0, 3) === "```") {
          articleContent = `${articleContent}\n` + "`" + `}</code></pre>\n`;
          codeFlag = false;
        } else {
          articleContent = `${articleContent}${item}\n`;
        }
      } else if (item.slice(0, 2) === "# ") {
        // Heading
        heading = item.slice(2);
        homePageView = `${homePageView}
        <h2 className="text-2xl font-semibold mt-0">${heading}</h2>`;
      } else if (item.slice(0, 6) === "```mdx") {
        mdxFlag = true;
      } else if (item.slice(0, 3) === "```") {
        if (!codeFlag) {
          articleContent = `${articleContent}\n<pre><code>\n{` + "`";
          codeFlag = true;
        }
      } else {
        // Detailed content
        if (item) {
          if (ulFlag && item.slice(0, 2) !== "- ") {
            ulFlag = false;
            articleContent = `${articleContent}</ul>`;
          }

          if (item.slice(0, 3) === "## ") {
            articleContent = `${articleContent}<h2>${item.slice(3)}</h2>`;
          } else if (item.slice(0, 2) === "- ") {
            if (ulFlag) {
              articleContent = `${articleContent}<li>${item.slice(2)}</li>`;
            } else {
              articleContent = `${articleContent}<ul><li>${item.slice(2)}</li>`;
              ulFlag = true;
            }
          } else if (
            item.match(
              /!\[[^\]]*]\((?<filename>.*?)(?=[")])(?<optionalpart>".*")?\)/
            )
          ) {
            const matchGroups = item.match(
              /!\[(?<alt>[^\]]*])\((?<filename>.*?)(?=[")])\)/
            );

            const imgAlt = matchGroups?.[1];
            const imgSrc = matchGroups?.[2];

            if (imgSrc && imgAlt) {
              articleContent = `${articleContent}<img src="${imgSrc}" alt="${imgAlt.slice(
                0,
                -1
              )}"/>`;
            }
          } else {
            if ((item.match(/\*\*/g) || []).length > 1) {
              let instance = 0;
              articleContent = `${articleContent}<p>${item.replace(
                /\*\*/g,
                (match, id): string => {
                  if (instance++ % 2 === 0) {
                    return "<strong>";
                  } else {
                    return "</strong>";
                  }
                }
              )}</p>`;
            } else {
              articleContent = `${articleContent}<p>${item}</p>`;
            }
          }
        }
      }
    }

    homePageView = `${homePageView}
        </Paper></Link>
        `;

    articleFile = `${articleFile}
    "${fileOrFolder.name.slice(0, -3)}": () => (
      <div className="mb-32">
        <h1>${heading}</h1>
        <div>
          ${articleContent}
        </div>
      </div>
    ),
    `;
  }
}

homePageView = `${homePageView}    </div>
  );
};

export default HomePageView;
`;

articleFile = `${articleFile}};
export default articles;`;

const encoder = new TextEncoder();
const homePageHtml = encoder.encode(homePageView);
await Deno.writeFile("./src/auto-generated/home.tsx", homePageHtml, {
  append: false,
});

console.log(green("Home page generated for distribution. . ."));

const articlePageJsx = encoder.encode(articleFile);
await Deno.writeFile("./src/auto-generated/article.tsx", articlePageJsx, {
  append: false,
});

console.log(green("Article page generated for distribution. . ."));
