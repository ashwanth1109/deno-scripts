// TODO: Terrible code mess. Refactor this entire file.
// FIXME: Use regex to match markdown syntax. Split into smaller entities

import { exists, walk, green } from "../dependencies.ts";

const folder = Deno.args[0];
const encoder = new TextEncoder();

if (!(await exists(folder))) {
  throw Error("Directory does not exist");
}

const decoder = new TextDecoder("utf-8");
let homePageView = `/** Autogenerated from markdown files using mdx-parser deno script */
import React from 'react';
import { Paper } from '@material-ui/core';
import { useSelector } from 'react-redux';
import { Link } from 'react-router-dom';
import { themeSelector } from '@state/theme.state';
import { clientSelector, DEVICE } from '@state/client.state';

const HomePageView = () => {
  const theme = useSelector(themeSelector);
  const client = useSelector(clientSelector);

  const isMobile = client.device === DEVICE.MOBILE;
  
  return (
    <div>`;

let articleFile = `/** Autogenerated from markdown files using mdx-parser deno script */
import React, { FunctionComponent } from 'react';
import SyntaxHighlighter from 'react-syntax-highlighter';
import { atomOneDark } from 'react-syntax-highlighter/dist/esm/styles/hljs';
import ReactPlayer from 'react-player';

interface CompProps {
  videoW?: number;
  videoH?: number;
}

const articles: { [fileName: string]: FunctionComponent<CompProps> } = {`;

for await (const fileOrFolder of walk(folder)) {
  if (fileOrFolder.isFile) {
    const { path } = fileOrFolder;
    const data = await Deno.readFile(path);
    const content = decoder.decode(data);

    const contentArr = content.split("\n");

    homePageView = `${homePageView}
        <Paper elevation={0} className="mt-8" style={{ backgroundColor: theme.body.bg, color: theme.body.text }}>
        <div className={\`flex \$\{
        isMobile ? 'flex-col' : 'flex-row justify-between items-center'
    \} mb-2\`}>
        `;

    let mdxFlag = false;
    let ulFlag = false;
    let codeFlag = false;
    let heading = "";
    let articleContent = "";
    let videoFlag = false;

    for (const item of contentArr) {
      // TODO: this needs to be optimized such that the order is most efficient when rendering
      // So most frequently passing if checks should be at the top
      if (mdxFlag) {
        if (item.slice(0, 8) === "Length: ") {
          const len = item.slice(8);
          homePageView = `${homePageView}
          {!isMobile && <p className="text-lg my-0">${len}</p>}`;
        } else if (item.slice(0, 6) === "Date: ") {
          const date = item.slice(6);
          homePageView = `${homePageView}
          </div><div className="flex row items-center flex-wrap w-full">
          <div className="date-tag">${date}</div>`;
        } else if (item.slice(0, 6) === "Tags: ") {
          const tags = item.slice(6).split(", ");
          tags.forEach((tag) => {
            homePageView = `${homePageView}<div className="article-tags" style={{backgroundColor: theme.tag}}>${tag}</div>`;
          });

          homePageView = `${homePageView}</div>`;
        } else if (item.slice(0, 3) === "```") {
          mdxFlag = false;
        }
      } else if (codeFlag) {
        if (item.slice(0, 3) === "```") {
          articleContent =
            `${articleContent}\n` + "`" + `}</SyntaxHighlighter>\n`;
          codeFlag = false;
        } else {
          articleContent = `${articleContent}${item}\n`;
        }
      } else if (item.slice(0, 2) === "# ") {
        // Heading
        heading = item.slice(2);
        homePageView = `${homePageView}
        <Link to="/articles/${fileOrFolder.name.slice(0, -3).split(".")[1]}">
        <h3 className={\`mt-0 hover:underline \$\{isMobile ? 'text-2xl' : ''\}\`}>${heading}</h3></Link>`;
      } else if (item.slice(0, 6) === "```mdx") {
        mdxFlag = true;
      } else if (item.slice(0, 3) === "```") {
        if (!codeFlag) {
          articleContent =
            `${articleContent}\n<SyntaxHighlighter language="javascript" style={atomOneDark}>\n{` +
            "`";
          codeFlag = true;
        }
      } else if (item.slice(0, 9) === "==>video=") {
        videoFlag = true;
        articleContent = `${articleContent}\n<div className="mt-8"><ReactPlayer 
url="${item.slice(9)}" 
width={videoW || 1000} 
height={videoH || 560}
/></div>`;
      } else {
        // Detailed content
        if (item) {
          if (ulFlag && item.slice(0, 2) !== "- ") {
            ulFlag = false;
            articleContent = `${articleContent}</ul>`;
          }

          if (item.slice(0, 3) === "## ") {
            articleContent = `${articleContent}<h2>${item.slice(3)}</h2>`;
          } else if (item.slice(0, 2) === "- ") {
            if (ulFlag) {
              articleContent = `${articleContent}<li>${item.slice(2)}</li>`;
            } else {
              articleContent = `${articleContent}<ul><li>${item.slice(2)}</li>`;
              ulFlag = true;
            }
          } else if (
            item.match(
              /!\[[^\]]*]\((?<filename>.*?)(?=[")])(?<optionalpart>".*")?\)/
            )
          ) {
            const matchGroups = item.match(
              /!\[(?<alt>[^\]]*])\((?<filename>.*?)(?=[")])\)/
            );

            const imgAlt = matchGroups?.[1];
            const imgSrc = matchGroups?.[2];

            if (imgSrc && imgAlt) {
              articleContent = `${articleContent}<img src="${imgSrc}" alt="${imgAlt.slice(
                0,
                -1
              )}"/>`;
            }
          } else {
            if ((item.match(/\*\*/g) || []).length > 1) {
              let instance = 0;
              articleContent = `${articleContent}<p>${item.replace(
                /\*\*/g,
                (match, id): string => {
                  if (instance++ % 2 === 0) {
                    return "<strong>";
                  } else {
                    return "</strong>";
                  }
                }
              )}</p>`;
            } else {
              articleContent = `${articleContent}<p>${item}</p>`;
            }
          }
        }
      }
    }

    homePageView = `${homePageView}
        </Paper>
        `;

    articleFile = `${articleFile}
    "${fileOrFolder.name.slice(0, -3).split(".")[1]}": (${
      videoFlag ? "{videoW, videoH}" : ""
    }) => (
      <div className="mb-32">
        <h1>${heading}</h1>
        <div>
          ${articleContent}
        </div>
      </div>
    ),
    `;
  }
}

homePageView = `${homePageView}    </div>
  );
};

export default HomePageView;
`;

articleFile = `${articleFile}};
export default articles;`;

// TODO: Adopt similar pattern everywhere else (very elegant solution)
articleFile = articleFile.replace(
  /\[([^\]]+)]\(([^)]+)\)/g,
  '<a className="underline" href="$2" target="_blank">$1</a>'
);

const homePageHtml = encoder.encode(homePageView);
await Deno.writeFile("./src/auto-generated/home.tsx", homePageHtml, {
  append: false,
});

console.log(green("Home page generated for distribution. . ."));

const articlePageJsx = encoder.encode(articleFile);
await Deno.writeFile("./src/auto-generated/article.tsx", articlePageJsx, {
  append: false,
});

console.log(green("Article page generated for distribution. . ."));
